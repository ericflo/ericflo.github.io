<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Twitter | Eric Florenzano's Blog]]></title>
  <link href="http://eflorenzano.com/blog/categories/twitter/atom.xml" rel="self"/>
  <link href="http://eflorenzano.com/"/>
  <updated>2012-04-18T17:34:47-07:00</updated>
  <id>http://eflorenzano.com/</id>
  <author>
    <name><![CDATA[Eric Florenzano]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using Twitter's iOS5 Integration for Single Sign-On]]></title>
    <link href="http://eflorenzano.com/blog/2012/04/18/using-twitter-ios5-integration-single-sign-on/"/>
    <updated>2012-04-18T19:00:00-07:00</updated>
    <id>http://eflorenzano.com/blog/2012/04/18/using-twitter-ios5-integration-single-sign-on</id>
    <content type="html"><![CDATA[<p>Apple has included integration with Twitter in iOS5, which can be really handy
to allow your users to easily tweet or log in.  The only problem is that, as
far as documentation of this feature is concerned, you're largely on your own.
This blog post is an attempt to correct that, at least in the case of sign-on.</p>

<h1>Add the Twitter and Accounts libraries to your project</h1>

<p>Click on your project file, and then on your build target.  Make sure you're on
the "build phases" tab.  Under the "Link Binary With Libraries" section, click
the plus symbol to the bottom left, and search for <code>Accounts.framework</code> and
add it.  Then do the same for <code>Twitter.framework</code>.  This will link all of the
necessary libraries into your project so that we can use the Twitter
integration.</p>

<h1>Requesting access to a user's twitter account</h1>

<p>The first thing to do when you want to let a user sign-on with Twitter is to
create a long-lived (save it as an instance variable, for example) instance of
<code>ACAccountStore</code> and request access to the Twitter accounts contained within:</p>

<p>.. code-block:: obj-c</p>

<pre><code>ACAccountStore *store = [[ACAccountStore alloc] init]; // Long-lived
ACAccountType *twitterType = [store accountTypeWithAccountTypeIdentifier:ACAccountTypeIdentifierTwitter];
[store requestAccessToAccountsWithType:twitterType withCompletionHandler:^(BOOL granted, NSError *error) {
    if(granted) {
        // Access has been granted, now we can access the accounts
    }
    // Handle any error state here as you wish
}];
</code></pre>

<p>What do we do once we have access to the accounts?  Well, we get a list of 'em.
If they don't have any accounts, then we can show a dialog asking them to
connect one in the iOS settings app:</p>

<p>.. code-block:: obj-c</p>

<pre><code>// Remember that twitterType was instantiated above
NSArray *twitterAccounts = [store accountsWithType:twitterType];

// If there are no accounts, we need to pop up an alert
if(twitterAccounts != nil &amp;&amp; [twitterAccounts count] &gt; 0) {
    UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"No Twitter Accounts"
                                                    message:@"There are no Twitter accounts configured. You can add or create a Twitter account in Settings."
                                                   delegate:nil
                                          cancelButtonTitle:@"OK"
                                          otherButtonTitles:nil];
    [alert show];
    [alert release];
} else {
    ACAccount *account = [twitterAccounts objectAtIndex:0];
    // Do something with their Twitter account
}
</code></pre>

<h1>Now what?</h1>

<p>Well, now you have an access token to read some information about the user from
their Twitter stream.  The vast majority of apps will just want to grab the
user's basic info to get things like a username, real name, and maybe their
location.  Here's how that would look:</p>

<p>.. code-block:: obj-c</p>

<pre><code>NSURL *url = [NSURL URLWithString:@"http://api.twitter.com/1/account/verify_credentials.json"];
TWRequest *req = [[TWRequest alloc] initWithURL:url
                                     parameters:nil
                                  requestMethod:TWRequestMethodGET];

// Important: attach the user's Twitter ACAccount object to the request
req.account = account;

[req performRequestWithHandler:^(NSData *responseData,
                                 NSHTTPURLResponse *urlResponse,
                                 NSError *error) {

    // If there was an error making the request, display a message to the user
    if(error != nil) {
        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Twitter Error"
                                                        message:@"There was an error talking to Twitter. Please try again later."
                                                       delegate:nil
                                              cancelButtonTitle:@"OK"
                                              otherButtonTitles:nil];
        [alert show];
        [alert release];
        return;
    }

    // Parse the JSON response
    NSError *jsonError = nil;
    id resp = [NSJSONSerialization JSONObjectWithData:responseData
                                                      options:0
                                                        error:&amp;jsonError];

    // If there was an error decoding the JSON, display a message to the user
    if(jsonError != nil) {
        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Twitter Error"
                                                        message:@"Twitter is not acting properly right now. Please try again later."
                                                       delegate:nil
                                              cancelButtonTitle:@"OK"
                                              otherButtonTitles:nil];
        [alert show];
        [alert release];
        return;
    }

    NSString *screenName = [resp objectForKey:@"screen_name"];
    NSString *fullName = [resp objectForKey:@"name"];
    NSString *location = [resp objectForKey:@"location"];

    // Make sure to perform our operation back on the main thread
    dispatch_async(dispatch_get_main_queue(), ^{
        // Do something with the fetched data
    });
}];
</code></pre>

<p>Most of the code here is actually error handling code.  The meat of what we're
doing is simply fetching the user's credentials from Twitter, parsing the JSON,
and doing something with it. (What exactly you want to do with the username and
name data is left as an excercise for the reader.)</p>

<h1>That's it?</h1>

<p>Yep, that's it.  You should be able to implement Twitter sign-on for your app
with the simple code I've shown here.  The only bummer is the case when the
user doesn't have a Twitter account registered.  We're <code>not allowed</code>_ to help
the user out by sending them to the Settings app.  All we can do is tell users
to go there and hope they can figure it out.</p>

<p>Any other tips or tricks you have for implementing sign-on with Twitter on iOS?
Be sure to <code>tweet me</code>_ about it!</p>

<p>P.S. If you're building mobile apps, my startup <code>clutch.io</code>_ can help you build
and iterate faster on them. Check us out :)</p>

<p>.. <em><code>not allowed</code>: http://stackoverflow.com/questions/10055853/opening-ios-settings-preferences
.. </em><code>tweet me</code>: http://twitter.com/ericflo
.. _<code>clutch.io</code>: https://clutch.io/</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA["Web Hooks"]]></title>
    <link href="http://eflorenzano.com/blog/2008/11/26/web-hooks/"/>
    <updated>2008-11-26T20:43:30-08:00</updated>
    <id>http://eflorenzano.com/blog/2008/11/26/web-hooks</id>
    <content type="html"><![CDATA[<p>
A few months back GitHub<em> rolled out its implementation of something that they
call "Service Hooks".  The idea behind these hooks is that when you commit
some new piece of code to GitHub, they want to be able to alert other services
that you have committed that code.  For example, one of the service hooks is
the ability to send a tweet to Twitter, and another of those hooks updates the
Lighthouse</em> ticket tracker.</p>

<p>I thought this was a really good idea when they rolled it out, so I did a bit of
searching and found out that there is a larger body of work surrounding this
idea, and that body of work is called <code>Web Hooks</code>_.  The central idea behind
web hooks is that a user supplies a service that they use with a URL.  Then,
when that user performs an action on that service, the service agrees to send an
HTTP POST request to the user's specified URL, with some information about the
action that the user took on the service.</p>

<p>SlideShare has an excellent presentation_ deck about this idea, which likens it
to Unix pipes.  That analogy makes a lot of sense if you think about it.  With
the standard model that most websites follow today, a client can only send
requests.  This means repeated polling until the client receives the information
that it is interested in.  With web hooks, however, the service is responsible
for passing that action along to the next service.  This simple yet powerful
mechanism can allow for very advanced systems which interoperate very simply
through chaining.</p>

<p>Let's expore a concrete example of what this might look like.  A few months back
I signed up for a pro account on Flickr<em>, so that I could upload some of the
pictures that I had stored on my computer.  What I did was to upload some
pictures with descriptions, and then I went and posted on Twitter some of the
links to those pictures.  I also went and added that new Flickr account to
FriendFeed</em> so that others could see my pictures as well.</p>

<p>This was all a manual process.  If both Flickr and Twitter supported web hooks,
I could have simply set up their respective URLs and uploaded my pictures.  The
process might have happened like this:  First, the pictures are uploaded.  Then
Flickr sends a POST request to Twitter, with the description of the picture and
a link to the picture.  Twitter sends a POST request to FriendFeed, adding the
new item to my FriendFeed lifestream.</p>

<p>You could even write custom scripts to handle the web hooks. For example let's
say that I want any tweet with the name 'Kevin' to be sent to my brother's email
address.  I could add a URL to Twitter linking to a script on my computer which
scans the contents of the tweet.  If the tweet has the name 'Kevin' in it, it
would send an email.  If not, it might do nothing.</p>

<p>I think that this concept is very powerful not only in terms of rendering
trivial the interoperability between disparate services, but also in terms of
simply saving on bandwidth and computing power.  Technologies which constantly
poll resources hoping for updated content seem silly in comparison to the
powerful simplicity that web hooks provide.</p>

<p>There are definitely some drawbacks to a system like this.  Firstly, the name: I
actually can't think of a worse name for this concept.  Web hooks?!  Let's come
up with something better.  All joking aside though, this type of system does
face a serious problem when it comes to the question of reliability.  If a
script receives no POST, it could mean that either no event happened, or that
the internet connection went down for a bit, or that the service is down, or any
number of other possible things.  I think the solution for this is a hybrid
model of sparse polling in conjunction with web hooks.</p>

<p>Most of all, this technology just seems so underused.  There are ridiculously
few people who implement something like this, yet it seems like an undeniably
useful service--especially given its relative simplicity to implement.  Let's
all try to encourage the services that we use on a daily basis to support web
hooks, because by doing just that, we can make the web a lot better.</p>

<p>.. <em>GitHub: http://github.com/
.. </em>Lighthouse: http://lighthouseapp.com/
.. <em><code>Web Hooks</code>: http://webhooks.pbwiki.com/
.. </em>presentation: http://www.slideshare.net/progrium/web-hooks
.. <em>Flickr: http://flickr.com/
.. </em>FriendFeed: http://friendfeed.com/
</p>
]]></content>
  </entry>
  
</feed>
