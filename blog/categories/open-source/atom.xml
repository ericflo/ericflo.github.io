<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Open Source | Eric Florenzano's Blog]]></title>
  <link href="http://ericflo.github.com/blog/categories/open-source/atom.xml" rel="self"/>
  <link href="http://ericflo.github.com/"/>
  <updated>2012-01-01T18:16:12-08:00</updated>
  <id>http://ericflo.github.com/</id>
  <author>
    <name><![CDATA[Eric Florenzano]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Announcing django-threadedcomments]]></title>
    <link href="http://ericflo.github.com/blog/2008/01/23/announcing-django-threadedcomments/"/>
    <updated>2008-01-23T09:26:04-08:00</updated>
    <id>http://ericflo.github.com/blog/2008/01/23/announcing-django-threadedcomments</id>
    <content type="html"><![CDATA[<p>
Django-threadedcomments_ is a simple yet flexible threaded commenting system for Django.  What I mean when I say threaded is that commenters can reply not only to the original item, but to other comments as well.  It is very similar to what Reddit or Digg have in their comments sections.</p>

<p>The idea for this application started about a month and a half ago, when my good friend Tony Hauber asked if I would work with him on a project idea that he had (more info on this in the future).  One of the major components of the project would need to be threaded comments.  Naturally, the first thing that I did was attempt to make <code>django.contrib.comments</code> work for this purpose.  In the end, however, I kept running into problems which all basically boiled down to the fact that <code>django.contrib.comments</code> was never meant for this purpose.</p>

<p>So I used <code>django.contrib.comments</code> as a starting point, brought in some of the best features of the excellent django-comment-utils<em> (In fact, django-threadedcomments</em> actually provides a fair amount of compatiblity with the Managers from django-comment-utils), and added a bit of my own alchemy.  This is the result of those things.</p>

<p>A lot of effort has gone into documentation on this project: inline documentation, <code>a tutorial on setting it up with a blog</code><em>, and <code>complete API documentation</code></em>.  In fact, to see what you'll get after completing <code>the tutorial</code><em>, head on over to <code>this page</code></em>.  Please excuse my color scheme there--It's the comments that I'm trying to show off, not my design skills (or lack thereof).</p>

<p>If you're worried about the hassle of writing a script to migrate all of your <code>django.contrib.comments</code> comments to this new system, then fear not: there's an included migration script and you'll only need to run <code>python manage.py migratecomments</code> and the migration is automatically taken care of for you.</p>

<p>I really hope that this can be a useful tool for people looking to add a threaded commenting system to a project of theirs.  <code>Check it out</code>_ and see if it's right for you!</p>

<p>.. <em>Django-threadedcomments: http://code.google.com/p/django-threadedcomments/
.. </em>django-comment-utils: http://code.google.com/p/django-comment-utils/
.. <em>django-threadedcomments: http://code.google.com/p/django-threadedcomments/
.. </em><code>a tutorial on setting it up with a blog</code>: http://api.rst2a.com/1.0/rst2/html?uri=http%3A//django-threadedcomments.googlecode.com/svn/trunk/docs/tutorial.txt&amp;style=zope
.. <em><code>complete API documentation</code>: http://api.rst2a.com/1.0/rst2/html?uri=http%3A//django-threadedcomments.googlecode.com/svn/trunk/docs/api.txt&amp;style=zope
.. </em><code>the tutorial</code>: http://api.rst2a.com/1.0/rst2/html?uri=http%3A//django-threadedcomments.googlecode.com/svn/trunk/docs/tutorial.txt&amp;style=zope
.. <em><code>this page</code>: http://www.eflorenzano.com/threadedcomments/example/
.. </em><code>Check it out</code>: http://code.google.com/p/django-threadedcomments/
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Involved in the Django Project]]></title>
    <link href="http://ericflo.github.com/blog/2007/12/07/getting-involved-django-project/"/>
    <updated>2007-12-07T10:24:10-08:00</updated>
    <id>http://ericflo.github.com/blog/2007/12/07/getting-involved-django-project</id>
    <content type="html"><![CDATA[<p>
Getting involved in an open source project is hard.  I've been working with Django_ since early 2006 and doing so makes me want to contribute back to the project.  Several times now I've made attempts to do so, but all of them have failed.  Looking back it's easy to see where I, as a newcomer to the open source world, went wrong.  So let's start out with what <strong>not</strong> to do, by example.  After that I'll give some suggestions on what I think is the right way to go about it.</p>

<h2>Don't do these things:</h2>

<ol>
<li><p>Don't bite off more than you can chew
 As a newcomer to both Python and Django, and to web development in general, one thing that I
 constantly needed to do was redefine my models slightly differently as I discovered flaws in my
 previous designs.  Django does not make this easy, as you either have to manually migrate your
 SQL or you have to delete all of your data.  Can you see where this is going?  I thought, "Perfect,
 there's a way that I can contribute!  I'll add schema evolution to Django!"  This was a huge
 undertaking, it took a long time, and it eventually flopped because I simply didn't have the
 experience at that point necessary to accomplish this task.</p></li>
<li><p>Don't work privately
 The other problem with tackling schema evolution was that I had contacted off-list another person
 who was enthusiastic about the idea, <code>Victor NG</code><em>.  Now  he's a great coder and did a lot of the
 work on that project, but he wasn't an established member of the community.  We had set up a
 completely separate SVN (actually SVK</em>) server and everything.  The result was that we were
 completely shut off from the rest of the development community, and didn't get any input or insight
 from the people who were really running the project.</p></li>
<li><p>As a newcomer, don't work on a community project
 The next thing that I tried working on was a "DjangoForge" project.  I worked very hard for almost a
 month--the month leading up to PyCon--and got a complete prototype up and running.  When I got
 to PyCon, I expected to make a big debut and everyone would instantly love it and jump on board.<br/>
 Wow, was that naive!  Nobody knew who I was, and everyone had different ideas about what a
 community portal, a "DjangoForge", would need to be.</p></li>
</ol>


<h2>Do these things:</h2>

<ol>
<li><p>Start without code
 Start on documentation.  There are two reasons that this is a good idea.  Firstly, those people who
 are checking in tickets will start to recognize your name and will see that you're interested in
 contributing.  Secondly, you will begin to understand more and more about the internals of the
 framework as you see how people are adding features.  I think that writing documentation is boring,
 but what's more boring is not knowing the codebase well enough and writing bad code as a result.</p></li>
<li><p>Then do test code
 After documenting some of the underpinnings of the framework, you now have a pretty good idea
 about how it <em>should</em> behave.  Now make sure it really behaves that way.  Many people don't follow
 the <code>Code Unit Test First</code>_ or test-driven development methodology.  That is, they write the code
 and submit the patch without formal tests.  These patches usually can't be checked in to Django
 without test code, as a lot of people rely on the trunk to be stable.  So you can do a lot of good by
 simply writing test code, and it will earn you a lot of gratitude from the folks trying to get things
 done.  On top of being helpful and earning gratitude, it helps you to learn the framework that much
 better.</p></li>
<li><p>Work on already-submitted tickets.
 It can be tempting to work on a pet-feature that you would like to have done.  This is not a bad
 temptation, but for someone who is trying to become part of the community, it may be better to look
 at what the core developers are anxious to have done.  This is where I am currently, working on
 tickets<em> <code>that the</code></em> <code>core devs</code><em> <code>have filed</code></em>.  They have good reasons for filing these tickets:
 they have deemed it a wanted feature or bug, they have determined that it's a solvable idea or
 problem, and they may even have insights in how to implement it!  These tickets can range from
 small-scale to large-scale and now is when you can really start to show your stuff as a programmer.</p></li>
<li><p>Read django-dev mailing list
 There's nothing more helpful than tracking where Django is going and what ideas are being kicked
 around on that list.  Many times an idea has been brought up, fleshed out, and eventually decided
 upon.  This doesn't always happen in the ticket tracker, and it shouldn't.  Whenever discussion is
 needed, the mailing lists are a much better forum for that discussion to take place.  This is also a
 good place to ping the community on tickets that you're interested in or have worked on.  Just
 <em>please</em> don't spam the list, as nothing will make people more upset at you than a whiny spammer
 on the django-dev mailing list.</p></li>
</ol>


<h2>...and beyond</h2>

<p>After that, I have no more solid advice.  That's where I'm sitting right now with the Django project.  I'd like to become even more involved.  I'll probably will go about doing so by starting to propose new features, jumping in on the conversation, attending PyCon 2008, and working on spinoff projects like the excellent django-evolution_.  But I'd like to know how other people have done it.  <strong>How have you gotten involved in the Django project?</strong></p>

<p><strong>Update:</strong> <code>Adrian Holovaty</code><em> makes a great point in mentioning to check out the <code>Contributing to Django</code></em> section of the Django documentation, with gives a plethora of guidelines and tips for doing just that.  Thanks, Adrian!</p>

<p>.. <em>Django: http://www.djangoproject.com
.. </em><code>Victor NG</code>: http://www.crankycoder.com/
.. <em>SVK: http://svk.bestpractical.com/view/HomePage
.. </em><code>Code Unit Test First</code>: http://c2.com/cgi/wiki?CodeUnitTestFirst
.. <em>tickets: http://code.djangoproject.com/ticket/6095
.. </em><code>that the</code>: http://code.djangoproject.com/ticket/6064
.. <em><code>core devs</code>: http://code.djangoproject.com/ticket/6066
.. </em><code>have filed</code>: http://code.djangoproject.com/ticket/6092
.. <em>django-evolution: http://code.google.com/p/django-evolution/
.. </em><code>Adrian Holovaty</code>: http://www.holovaty.com/
.. _<code>Contributing to Django</code>: http://www.djangoproject.com/documentation/contributing/
</p>
]]></content>
  </entry>
  
</feed>
